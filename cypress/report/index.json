{
  "stats": {
    "suites": 12,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-13T14:41:26.071Z",
    "end": "2022-06-13T14:42:21.624Z",
    "duration": 55553,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d8af648e-91e2-4dd7-9ea0-ba085fd2aa7d",
      "title": "",
      "fullFile": "cypress/e2e/app.cy.js",
      "file": "cypress/e2e/app.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "df8bad55-5979-416f-98f3-48733ca1315e",
          "title": "TodoMVC - React",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "adds 2 todos",
              "fullTitle": "TodoMVC - React adds 2 todos",
              "timedOut": null,
              "duration": 1133,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);",
              "err": {},
              "uuid": "4b86b435-8430-478c-a931-b317c7b09ac0",
              "parentUUID": "df8bad55-5979-416f-98f3-48733ca1315e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "4618753b-1224-436e-bd92-6bf9bf76c876",
              "title": "When page is initially opened",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should focus on the todo input field",
                  "fullTitle": "TodoMVC - React When page is initially opened should focus on the todo input field",
                  "timedOut": null,
                  "duration": 251,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// get the currently focused element and assert\n// that it has class='new-todo'\n//\n// http://on.cypress.io/focused\ncy.focused().should('have.class', 'new-todo');",
                  "err": {},
                  "uuid": "26cd4550-687d-4016-a223-2ac3e23e6dd9",
                  "parentUUID": "4618753b-1224-436e-bd92-6bf9bf76c876",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26cd4550-687d-4016-a223-2ac3e23e6dd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 251,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f58d10d-49a0-4761-873c-5f54798d94db",
              "title": "No Todos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide #main and #footer",
                  "fullTitle": "TodoMVC - React No Todos should hide #main and #footer",
                  "timedOut": null,
                  "duration": 251,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Unlike the TodoMVC tests, we don't need to create\n// a gazillion helper functions which are difficult to\n// parse through. Instead we'll opt to use real selectors\n// so as to make our testing intentions as clear as possible.\n//\n// http://on.cypress.io/get\ncy.get('.todo-list li').should('not.exist');\ncy.get('.main').should('not.exist');\ncy.get('.footer').should('not.exist');",
                  "err": {},
                  "uuid": "606fa2ac-1096-4303-b69f-81702ddaf5e5",
                  "parentUUID": "0f58d10d-49a0-4761-873c-5f54798d94db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "606fa2ac-1096-4303-b69f-81702ddaf5e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 251,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51f8fd2c-a0a3-4a1d-9fbc-d682f8d1a297",
              "title": "New Todo",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to add todo items",
                  "fullTitle": "TodoMVC - React New Todo should allow me to add todo items",
                  "timedOut": null,
                  "duration": 1396,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create 1st todo\ncy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}'); // make sure the 1st label contains the 1st todo text\ncy.get('.todo-list li').eq(0).find('label').should('contain', TODO_ITEM_ONE); // create 2nd todo\ncy.get('.new-todo').type(TODO_ITEM_TWO).type('{enter}'); // make sure the 2nd label contains the 2nd todo text\ncy.get('.todo-list li').eq(1).find('label').should('contain', TODO_ITEM_TWO);",
                  "err": {},
                  "uuid": "83616431-9a2b-4b7a-9eba-23483d0c1a42",
                  "parentUUID": "51f8fd2c-a0a3-4a1d-9fbc-d682f8d1a297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "adds items",
                  "fullTitle": "TodoMVC - React New Todo adds items",
                  "timedOut": null,
                  "duration": 1382,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create several todos then check the number of items in the list\ncy.get('.new-todo').type('todo A{enter}').type('todo B{enter}') // we can continue working with same element\n.type('todo C{enter}') // and keep adding new items\n.type('todo D{enter}');\ncy.get('.todo-list li').should('have.length', 4);",
                  "err": {},
                  "uuid": "6a7a1d1e-fb0d-4624-8ab9-008d3f140e55",
                  "parentUUID": "51f8fd2c-a0a3-4a1d-9fbc-d682f8d1a297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear text input field when an item is added",
                  "fullTitle": "TodoMVC - React New Todo should clear text input field when an item is added",
                  "timedOut": null,
                  "duration": 746,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\ncy.get('.new-todo').should('have.text', '');",
                  "err": {},
                  "uuid": "82452d3a-3d8f-4a65-8881-55b7bc648d01",
                  "parentUUID": "51f8fd2c-a0a3-4a1d-9fbc-d682f8d1a297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should append new items to the bottom of the list",
                  "fullTitle": "TodoMVC - React New Todo should append new items to the bottom of the list",
                  "timedOut": null,
                  "duration": 2048,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of a custom command\n// defined in cypress/support/commands.js\ncy.createDefaultTodos().as('todos'); // even though the text content is split across\n// multiple <span> and <strong> elements\n// `cy.contains` can verify this correctly\ncy.get('.todo-count').contains('3 items left');\ncy.get('@todos').eq(0).find('label').should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).find('label').should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).find('label').should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "5e4a72b7-b2dd-4a65-ba5f-f5ae799c8027",
                  "parentUUID": "51f8fd2c-a0a3-4a1d-9fbc-d682f8d1a297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim text input",
                  "fullTitle": "TodoMVC - React New Todo should trim text input",
                  "timedOut": null,
                  "duration": 927,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of another custom command\n// since we repeat the todo creation over and over\n// again. It's up to you to decide when to abstract\n// repetitive behavior and roll that up into a custom\n// command vs explicitly writing the code.\ncy.createTodo(`    ${TODO_ITEM_ONE}    `); // we use as explicit assertion here about the text instead of\n// using 'contain' so we can specify the exact text of the element\n// does not have any whitespace around it\ncy.get('.todo-list li').eq(0).should('have.text', TODO_ITEM_ONE);",
                  "err": {},
                  "uuid": "bf2ac2a1-0760-45fb-8404-608da02a0e32",
                  "parentUUID": "51f8fd2c-a0a3-4a1d-9fbc-d682f8d1a297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show #main and #footer when items added",
                  "fullTitle": "TodoMVC - React New Todo should show #main and #footer when items added",
                  "timedOut": null,
                  "duration": 648,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.main').should('be.visible');\ncy.get('.footer').should('be.visible');",
                  "err": {},
                  "uuid": "3c96f268-4d5a-4c89-8d0c-1331c160a4af",
                  "parentUUID": "51f8fd2c-a0a3-4a1d-9fbc-d682f8d1a297",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83616431-9a2b-4b7a-9eba-23483d0c1a42",
                "6a7a1d1e-fb0d-4624-8ab9-008d3f140e55",
                "82452d3a-3d8f-4a65-8881-55b7bc648d01",
                "5e4a72b7-b2dd-4a65-ba5f-f5ae799c8027",
                "bf2ac2a1-0760-45fb-8404-608da02a0e32",
                "3c96f268-4d5a-4c89-8d0c-1331c160a4af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7147,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84aa7f9e-e8a6-4f12-91a0-8521506b67f9",
              "title": "Mark all as completed",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark all items as completed",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to mark all items as completed",
                  "timedOut": null,
                  "duration": 2138,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// complete all todos\n// we use 'check' instead of 'click'\n// because that indicates our intention much clearer\ncy.get('.toggle-all').check(); // get each todo li and ensure its class is 'completed'\ncy.get('@todos').eq(0).should('have.class', 'completed');\ncy.get('@todos').eq(1).should('have.class', 'completed');\ncy.get('@todos').eq(2).should('have.class', 'completed');",
                  "err": {},
                  "uuid": "8bb38973-e877-4580-877e-7e877c563bcb",
                  "parentUUID": "84aa7f9e-e8a6-4f12-91a0-8521506b67f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to clear the complete state of all items",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to clear the complete state of all items",
                  "timedOut": null,
                  "duration": 2083,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check and then immediately uncheck\ncy.get('.toggle-all').check().uncheck();\ncy.get('@todos').eq(0).should('not.have.class', 'completed');\ncy.get('@todos').eq(1).should('not.have.class', 'completed');\ncy.get('@todos').eq(2).should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "d82ac52d-37f2-47fa-bf31-44b0cf7240c9",
                  "parentUUID": "84aa7f9e-e8a6-4f12-91a0-8521506b67f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "complete all checkbox should update state when items are completed / cleared",
                  "fullTitle": "TodoMVC - React Mark all as completed complete all checkbox should update state when items are completed / cleared",
                  "timedOut": null,
                  "duration": 2118,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// alias the .toggle-all for reuse later\ncy.get('.toggle-all').as('toggleAll').check() // this assertion is silly here IMO but\n// it is what TodoMVC does\n.should('be.checked'); // alias the first todo and then click it\ncy.get('.todo-list li').eq(0).as('firstTodo').find('.toggle').uncheck(); // reference the .toggle-all element again\n// and make sure its not checked\ncy.get('@toggleAll').should('not.be.checked'); // reference the first todo again and now toggle it\ncy.get('@firstTodo').find('.toggle').check(); // assert the toggle all is checked again\ncy.get('@toggleAll').should('be.checked');",
                  "err": {},
                  "uuid": "e79c134d-dd6d-479a-a4b0-0711e66e87b6",
                  "parentUUID": "84aa7f9e-e8a6-4f12-91a0-8521506b67f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bb38973-e877-4580-877e-7e877c563bcb",
                "d82ac52d-37f2-47fa-bf31-44b0cf7240c9",
                "e79c134d-dd6d-479a-a4b0-0711e66e87b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6339,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2a17600d-2b80-4c1c-b47c-86cadc228510",
              "title": "Item",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to mark items as complete",
                  "timedOut": null,
                  "duration": 1280,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// we are aliasing the return value of\n// our custom command 'createTodo'\n//\n// the return value is the <li> in the <ul.todos-list>\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('have.class', 'completed');",
                  "err": {},
                  "uuid": "5de21ad0-6d51-4e24-9aea-dca798d4d119",
                  "parentUUID": "2a17600d-2b80-4c1c-b47c-86cadc228510",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to un-mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to un-mark items as complete",
                  "timedOut": null,
                  "duration": 1235,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@firstTodo').find('.toggle').uncheck();\ncy.get('@firstTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "10851eb2-202e-4982-91be-4804f52a1c14",
                  "parentUUID": "2a17600d-2b80-4c1c-b47c-86cadc228510",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to edit an item",
                  "fullTitle": "TodoMVC - React Item should allow me to edit an item",
                  "timedOut": null,
                  "duration": 2631,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createDefaultTodos().as('todos');\ncy.get('@todos').eq(1).as('secondTodo') // TODO: fix this, dblclick should\n// have been issued to label\n.find('label').dblclick(); // clear out the inputs current value\n// and type a new value\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages').type('{enter}'); // explicitly assert about the text value\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "36507436-af82-4194-be9e-115a0c4ebb23",
                  "parentUUID": "2a17600d-2b80-4c1c-b47c-86cadc228510",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5de21ad0-6d51-4e24-9aea-dca798d4d119",
                "10851eb2-202e-4982-91be-4804f52a1c14",
                "36507436-af82-4194-be9e-115a0c4ebb23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5146,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea86f088-45c7-4791-bb71-01d81062e8d5",
              "title": "Editing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide other controls when editing",
                  "fullTitle": "TodoMVC - React Editing should hide other controls when editing",
                  "timedOut": null,
                  "duration": 2037,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.toggle').should('not.be.visible');\ncy.get('@secondTodo').find('label').should('not.be.visible');",
                  "err": {},
                  "uuid": "3f93bf6b-2d58-4a0c-90b5-a50cf7be619d",
                  "parentUUID": "ea86f088-45c7-4791-bb71-01d81062e8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should save edits on blur",
                  "fullTitle": "TodoMVC - React Editing should save edits on blur",
                  "timedOut": null,
                  "duration": 2672,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages') // we can just send the blur event directly\n// to the input instead of having to click\n// on another button on the page. though you\n// could do that its just more mental work\n.blur();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "86c7f0e1-ffa3-42e2-9643-00c113492f0e",
                  "parentUUID": "ea86f088-45c7-4791-bb71-01d81062e8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim entered text",
                  "fullTitle": "TodoMVC - React Editing should trim entered text",
                  "timedOut": null,
                  "duration": 2854,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('    buy some sausages    ').type('{enter}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "16785601-2cf9-4c82-9df0-24ee99c6522a",
                  "parentUUID": "ea86f088-45c7-4791-bb71-01d81062e8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove the item if an empty text string was entered",
                  "fullTitle": "TodoMVC - React Editing should remove the item if an empty text string was entered",
                  "timedOut": null,
                  "duration": 2029,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('{enter}');\ncy.get('@todos').should('have.length', 2);",
                  "err": {},
                  "uuid": "1be67cbb-02bf-4d2f-b9ac-a5bb1a21f782",
                  "parentUUID": "ea86f088-45c7-4791-bb71-01d81062e8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cancel edits on escape",
                  "fullTitle": "TodoMVC - React Editing should cancel edits on escape",
                  "timedOut": null,
                  "duration": 2257,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('foo{esc}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "c8342cfa-2dc0-417e-8aab-e85e37ae7d93",
                  "parentUUID": "ea86f088-45c7-4791-bb71-01d81062e8d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f93bf6b-2d58-4a0c-90b5-a50cf7be619d",
                "86c7f0e1-ffa3-42e2-9643-00c113492f0e",
                "16785601-2cf9-4c82-9df0-24ee99c6522a",
                "1be67cbb-02bf-4d2f-b9ac-a5bb1a21f782",
                "c8342cfa-2dc0-417e-8aab-e85e37ae7d93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11849,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3cea11d-7fb7-4aae-b4bd-3176af693502",
              "title": "Counter",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the current number of todo items",
                  "fullTitle": "TodoMVC - React Counter should display the current number of todo items",
                  "timedOut": null,
                  "duration": 999,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.todo-count').contains('1 item left');\ncy.createTodo(TODO_ITEM_TWO);\ncy.get('.todo-count').contains('2 items left');",
                  "err": {},
                  "uuid": "a6d47aef-b52c-4bf2-ae76-801c630157a5",
                  "parentUUID": "a3cea11d-7fb7-4aae-b4bd-3176af693502",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6d47aef-b52c-4bf2-ae76-801c630157a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 999,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74c120cb-7f97-4f1a-8623-ad0c373abb9d",
              "title": "Clear completed button",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the correct text",
                  "fullTitle": "TodoMVC - React Clear completed button should display the correct text",
                  "timedOut": null,
                  "duration": 1900,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(0).find('.toggle').check();\ncy.get('.clear-completed').contains('Clear completed');",
                  "err": {},
                  "uuid": "17afda06-0b4e-4a2a-8005-015e95e8b9d9",
                  "parentUUID": "74c120cb-7f97-4f1a-8623-ad0c373abb9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove completed items when clicked",
                  "fullTitle": "TodoMVC - React Clear completed button should remove completed items when clicked",
                  "timedOut": null,
                  "duration": 1905,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').click();\ncy.get('@todos').should('have.length', 2);\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "722366c1-c671-4cde-bd03-ec76b9c961c6",
                  "parentUUID": "74c120cb-7f97-4f1a-8623-ad0c373abb9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be hidden when there are no items that are completed",
                  "fullTitle": "TodoMVC - React Clear completed button should be hidden when there are no items that are completed",
                  "timedOut": null,
                  "duration": 2224,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').should('be.visible').click();\ncy.get('.clear-completed').should('not.exist');",
                  "err": {},
                  "uuid": "c238ec27-849b-4bad-a86b-d31c65c9168e",
                  "parentUUID": "74c120cb-7f97-4f1a-8623-ad0c373abb9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17afda06-0b4e-4a2a-8005-015e95e8b9d9",
                "722366c1-c671-4cde-bd03-ec76b9c961c6",
                "c238ec27-849b-4bad-a86b-d31c65c9168e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6029,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77dcb380-fd09-457b-9e34-fd5122d65029",
              "title": "Persistence",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should persist its data",
                  "fullTitle": "TodoMVC - React Persistence should persist its data",
                  "timedOut": null,
                  "duration": 1500,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mimicking TodoMVC tests\n// by writing out this function\nfunction testState() {\n  cy.get('@firstTodo').should('contain', TODO_ITEM_ONE).and('have.class', 'completed');\n  cy.get('@secondTodo').should('contain', TODO_ITEM_TWO).and('not.have.class', 'completed');\n}\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check().then(testState).reload().then(testState);",
                  "err": {},
                  "uuid": "a3785d29-4fa0-4817-b80c-c8936323ffe8",
                  "parentUUID": "77dcb380-fd09-457b-9e34-fd5122d65029",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3785d29-4fa0-4817-b80c-c8936323ffe8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1500,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "beeb5bff-5093-4bbb-ad90-52545b1b74de",
              "title": "Routing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to display active items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display active items",
                  "timedOut": null,
                  "duration": 2092,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "d6c95f1e-bea6-4db1-aad6-f4b235b4db96",
                  "parentUUID": "beeb5bff-5093-4bbb-ad90-52545b1b74de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect the back button",
                  "fullTitle": "TodoMVC - React Routing should respect the back button",
                  "timedOut": null,
                  "duration": 2501,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);\ncy.go('back');\ncy.get('@todos').should('have.length', 2);\ncy.go('back');\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "9848ec5c-ab9e-4360-b7b5-304d9db6bf28",
                  "parentUUID": "beeb5bff-5093-4bbb-ad90-52545b1b74de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to display completed items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display completed items",
                  "timedOut": null,
                  "duration": 2184,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);",
                  "err": {},
                  "uuid": "f138835a-8b4b-45a1-b589-9339c084992a",
                  "parentUUID": "beeb5bff-5093-4bbb-ad90-52545b1b74de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to display all items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display all items",
                  "timedOut": null,
                  "duration": 2545,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('.filters').contains('All').click();\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "c7be1851-024d-414e-96b8-ab93f2029b6c",
                  "parentUUID": "beeb5bff-5093-4bbb-ad90-52545b1b74de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should highlight the currently applied filter",
                  "fullTitle": "TodoMVC - React Routing should highlight the currently applied filter",
                  "timedOut": null,
                  "duration": 2501,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// using a within here which will automatically scope\n// nested 'cy' queries to our parent element <ul.filters>\ncy.get('.filters').within(function () {\n  cy.contains('All').should('have.class', 'selected');\n  cy.contains('Active').click().should('have.class', 'selected');\n  cy.contains('Completed').click().should('have.class', 'selected');\n});",
                  "err": {},
                  "uuid": "0ccd6009-d2a9-4722-b228-93ae83a1c7e7",
                  "parentUUID": "beeb5bff-5093-4bbb-ad90-52545b1b74de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6c95f1e-bea6-4db1-aad6-f4b235b4db96",
                "9848ec5c-ab9e-4360-b7b5-304d9db6bf28",
                "f138835a-8b4b-45a1-b589-9339c084992a",
                "c7be1851-024d-414e-96b8-ab93f2029b6c",
                "0ccd6009-d2a9-4722-b228-93ae83a1c7e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11823,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb37500f-c432-4811-9c42-5c01276f6052",
              "title": "Contrast",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "has good contrast when empty",
                  "fullTitle": "TodoMVC - React Contrast has good contrast when empty",
                  "timedOut": null,
                  "duration": 470,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.addAxeCode();\ncy.checkA11y(null, {\n  runOnly: ['cat.color']\n});",
                  "err": {},
                  "uuid": "c23d67c2-2438-48b3-85a3-519e464f4f50",
                  "parentUUID": "fb37500f-c432-4811-9c42-5c01276f6052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "has good contrast with several todos",
                  "fullTitle": "TodoMVC - React Contrast has good contrast with several todos",
                  "timedOut": null,
                  "duration": 1447,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.addAxeCode();\ncy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);\ncy.checkA11y(null, {\n  runOnly: ['cat.color']\n}); // and after marking an item completed\ncy.get('.todo-list li').first().find('.toggle').check();\ncy.get('.todo-list li').first().should('have.class', 'completed');\ncy.checkA11y(null, {\n  runOnly: ['cat.color']\n});",
                  "err": {},
                  "uuid": "26ecd44f-40d7-4611-b31b-7ec738f633e6",
                  "parentUUID": "fb37500f-c432-4811-9c42-5c01276f6052",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c23d67c2-2438-48b3-85a3-519e464f4f50",
                "26ecd44f-40d7-4611-b31b-7ec738f633e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1917,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "4b86b435-8430-478c-a931-b317c7b09ac0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report",
        "charts": true,
        "reportPageTitle": "todo test results",
        "saveHtml": true,
        "reportFilename": "index",
        "overwrite": true
      },
      "version": "6.2.0"
    }
  }
}