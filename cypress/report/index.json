{
  "stats": {
    "suites": 12,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-13T14:46:35.985Z",
    "end": "2022-06-13T14:47:38.258Z",
    "duration": 62273,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7e408454-f2b6-4d58-a81c-77bbf627bf02",
      "title": "",
      "fullFile": "cypress/e2e/app.cy.js",
      "file": "cypress/e2e/app.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3133bfac-eaa2-4cd8-9dbb-ae5129c7adc4",
          "title": "TodoMVC - React",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "adds 2 todos",
              "fullTitle": "TodoMVC - React adds 2 todos",
              "timedOut": null,
              "duration": 1515,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);",
              "err": {},
              "uuid": "7d842a28-3e9d-4b59-8ef3-b6da66a31a33",
              "parentUUID": "3133bfac-eaa2-4cd8-9dbb-ae5129c7adc4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "70606260-2ab8-47e8-88cb-e5cfe326ee1c",
              "title": "When page is initially opened",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should focus on the todo input field",
                  "fullTitle": "TodoMVC - React When page is initially opened should focus on the todo input field",
                  "timedOut": null,
                  "duration": 401,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// get the currently focused element and assert\n// that it has class='new-todo'\n//\n// http://on.cypress.io/focused\ncy.focused().should('have.class', 'new-todo');",
                  "err": {},
                  "uuid": "9e316403-0496-4947-a8f5-611552a0620c",
                  "parentUUID": "70606260-2ab8-47e8-88cb-e5cfe326ee1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e316403-0496-4947-a8f5-611552a0620c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 401,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b61f8e1-29a7-41bd-961f-bac6f536973d",
              "title": "No Todos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide #main and #footer",
                  "fullTitle": "TodoMVC - React No Todos should hide #main and #footer",
                  "timedOut": null,
                  "duration": 313,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Unlike the TodoMVC tests, we don't need to create\n// a gazillion helper functions which are difficult to\n// parse through. Instead we'll opt to use real selectors\n// so as to make our testing intentions as clear as possible.\n//\n// http://on.cypress.io/get\ncy.get('.todo-list li').should('not.exist');\ncy.get('.main').should('not.exist');\ncy.get('.footer').should('not.exist');",
                  "err": {},
                  "uuid": "47d8842c-ebe2-4d7b-b915-3b317b530240",
                  "parentUUID": "2b61f8e1-29a7-41bd-961f-bac6f536973d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47d8842c-ebe2-4d7b-b915-3b317b530240"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 313,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fad9d52d-b7b8-40fc-af47-ca15563891b0",
              "title": "New Todo",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to add todo items",
                  "fullTitle": "TodoMVC - React New Todo should allow me to add todo items",
                  "timedOut": null,
                  "duration": 1485,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create 1st todo\ncy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}'); // make sure the 1st label contains the 1st todo text\ncy.get('.todo-list li').eq(0).find('label').should('contain', TODO_ITEM_ONE); // create 2nd todo\ncy.get('.new-todo').type(TODO_ITEM_TWO).type('{enter}'); // make sure the 2nd label contains the 2nd todo text\ncy.get('.todo-list li').eq(1).find('label').should('contain', TODO_ITEM_TWO);",
                  "err": {},
                  "uuid": "7f687019-a293-422f-af35-2271c80e4921",
                  "parentUUID": "fad9d52d-b7b8-40fc-af47-ca15563891b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "adds items",
                  "fullTitle": "TodoMVC - React New Todo adds items",
                  "timedOut": null,
                  "duration": 1523,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create several todos then check the number of items in the list\ncy.get('.new-todo').type('todo A{enter}').type('todo B{enter}') // we can continue working with same element\n.type('todo C{enter}') // and keep adding new items\n.type('todo D{enter}');\ncy.get('.todo-list li').should('have.length', 4);",
                  "err": {},
                  "uuid": "352d0efe-5e7b-4c26-9606-153dad8f4f0a",
                  "parentUUID": "fad9d52d-b7b8-40fc-af47-ca15563891b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear text input field when an item is added",
                  "fullTitle": "TodoMVC - React New Todo should clear text input field when an item is added",
                  "timedOut": null,
                  "duration": 1039,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\ncy.get('.new-todo').should('have.text', '');",
                  "err": {},
                  "uuid": "c1fea635-25e4-4ea2-84b7-40183b81ea7b",
                  "parentUUID": "fad9d52d-b7b8-40fc-af47-ca15563891b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should append new items to the bottom of the list",
                  "fullTitle": "TodoMVC - React New Todo should append new items to the bottom of the list",
                  "timedOut": null,
                  "duration": 2191,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of a custom command\n// defined in cypress/support/commands.js\ncy.createDefaultTodos().as('todos'); // even though the text content is split across\n// multiple <span> and <strong> elements\n// `cy.contains` can verify this correctly\ncy.get('.todo-count').contains('3 items left');\ncy.get('@todos').eq(0).find('label').should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).find('label').should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).find('label').should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "0f58687f-9d00-491d-b17a-e4597c4d2cda",
                  "parentUUID": "fad9d52d-b7b8-40fc-af47-ca15563891b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim text input",
                  "fullTitle": "TodoMVC - React New Todo should trim text input",
                  "timedOut": null,
                  "duration": 1126,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of another custom command\n// since we repeat the todo creation over and over\n// again. It's up to you to decide when to abstract\n// repetitive behavior and roll that up into a custom\n// command vs explicitly writing the code.\ncy.createTodo(`    ${TODO_ITEM_ONE}    `); // we use as explicit assertion here about the text instead of\n// using 'contain' so we can specify the exact text of the element\n// does not have any whitespace around it\ncy.get('.todo-list li').eq(0).should('have.text', TODO_ITEM_ONE);",
                  "err": {},
                  "uuid": "57e8fdab-d0fa-441b-a5e5-6dc9e24c07f4",
                  "parentUUID": "fad9d52d-b7b8-40fc-af47-ca15563891b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show #main and #footer when items added",
                  "fullTitle": "TodoMVC - React New Todo should show #main and #footer when items added",
                  "timedOut": null,
                  "duration": 805,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.main').should('be.visible');\ncy.get('.footer').should('be.visible');",
                  "err": {},
                  "uuid": "6952c853-c4ed-449c-ac2e-7155b33484b4",
                  "parentUUID": "fad9d52d-b7b8-40fc-af47-ca15563891b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f687019-a293-422f-af35-2271c80e4921",
                "352d0efe-5e7b-4c26-9606-153dad8f4f0a",
                "c1fea635-25e4-4ea2-84b7-40183b81ea7b",
                "0f58687f-9d00-491d-b17a-e4597c4d2cda",
                "57e8fdab-d0fa-441b-a5e5-6dc9e24c07f4",
                "6952c853-c4ed-449c-ac2e-7155b33484b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8169,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cfe6f6f4-0669-4e8d-a17a-8174e4b629e9",
              "title": "Mark all as completed",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark all items as completed",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to mark all items as completed",
                  "timedOut": null,
                  "duration": 2306,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// complete all todos\n// we use 'check' instead of 'click'\n// because that indicates our intention much clearer\ncy.get('.toggle-all').check(); // get each todo li and ensure its class is 'completed'\ncy.get('@todos').eq(0).should('have.class', 'completed');\ncy.get('@todos').eq(1).should('have.class', 'completed');\ncy.get('@todos').eq(2).should('have.class', 'completed');",
                  "err": {},
                  "uuid": "d42a1470-2617-4775-b8be-9eeddf53f994",
                  "parentUUID": "cfe6f6f4-0669-4e8d-a17a-8174e4b629e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to clear the complete state of all items",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to clear the complete state of all items",
                  "timedOut": null,
                  "duration": 2388,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check and then immediately uncheck\ncy.get('.toggle-all').check().uncheck();\ncy.get('@todos').eq(0).should('not.have.class', 'completed');\ncy.get('@todos').eq(1).should('not.have.class', 'completed');\ncy.get('@todos').eq(2).should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "118493ce-5fed-44f7-a9dd-8766c3ac8ea6",
                  "parentUUID": "cfe6f6f4-0669-4e8d-a17a-8174e4b629e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "complete all checkbox should update state when items are completed / cleared",
                  "fullTitle": "TodoMVC - React Mark all as completed complete all checkbox should update state when items are completed / cleared",
                  "timedOut": null,
                  "duration": 2465,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// alias the .toggle-all for reuse later\ncy.get('.toggle-all').as('toggleAll').check() // this assertion is silly here IMO but\n// it is what TodoMVC does\n.should('be.checked'); // alias the first todo and then click it\ncy.get('.todo-list li').eq(0).as('firstTodo').find('.toggle').uncheck(); // reference the .toggle-all element again\n// and make sure its not checked\ncy.get('@toggleAll').should('not.be.checked'); // reference the first todo again and now toggle it\ncy.get('@firstTodo').find('.toggle').check(); // assert the toggle all is checked again\ncy.get('@toggleAll').should('be.checked');",
                  "err": {},
                  "uuid": "6e50916d-2225-41db-ac31-30ef1cc6f320",
                  "parentUUID": "cfe6f6f4-0669-4e8d-a17a-8174e4b629e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d42a1470-2617-4775-b8be-9eeddf53f994",
                "118493ce-5fed-44f7-a9dd-8766c3ac8ea6",
                "6e50916d-2225-41db-ac31-30ef1cc6f320"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8829316-ee9f-4be6-90e0-1bc124f88357",
              "title": "Item",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to mark items as complete",
                  "timedOut": null,
                  "duration": 1729,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// we are aliasing the return value of\n// our custom command 'createTodo'\n//\n// the return value is the <li> in the <ul.todos-list>\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('have.class', 'completed');",
                  "err": {},
                  "uuid": "e0284c0f-e1e8-4cd8-9c83-a5fd3414d1d8",
                  "parentUUID": "c8829316-ee9f-4be6-90e0-1bc124f88357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to un-mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to un-mark items as complete",
                  "timedOut": null,
                  "duration": 1656,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@firstTodo').find('.toggle').uncheck();\ncy.get('@firstTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "2cfb8d19-f976-46ec-8acc-fb16b5d66a84",
                  "parentUUID": "c8829316-ee9f-4be6-90e0-1bc124f88357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to edit an item",
                  "fullTitle": "TodoMVC - React Item should allow me to edit an item",
                  "timedOut": null,
                  "duration": 3065,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createDefaultTodos().as('todos');\ncy.get('@todos').eq(1).as('secondTodo') // TODO: fix this, dblclick should\n// have been issued to label\n.find('label').dblclick(); // clear out the inputs current value\n// and type a new value\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages').type('{enter}'); // explicitly assert about the text value\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "8494f33d-e20d-43e8-886c-97c6c7b53a1d",
                  "parentUUID": "c8829316-ee9f-4be6-90e0-1bc124f88357",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0284c0f-e1e8-4cd8-9c83-a5fd3414d1d8",
                "2cfb8d19-f976-46ec-8acc-fb16b5d66a84",
                "8494f33d-e20d-43e8-886c-97c6c7b53a1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6450,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d82b715d-a221-4d74-b6c1-06f35b628bb7",
              "title": "Editing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide other controls when editing",
                  "fullTitle": "TodoMVC - React Editing should hide other controls when editing",
                  "timedOut": null,
                  "duration": 2137,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.toggle').should('not.be.visible');\ncy.get('@secondTodo').find('label').should('not.be.visible');",
                  "err": {},
                  "uuid": "0ba0d4c2-269d-440b-bbeb-0cf83aa7f118",
                  "parentUUID": "d82b715d-a221-4d74-b6c1-06f35b628bb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should save edits on blur",
                  "fullTitle": "TodoMVC - React Editing should save edits on blur",
                  "timedOut": null,
                  "duration": 2889,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages') // we can just send the blur event directly\n// to the input instead of having to click\n// on another button on the page. though you\n// could do that its just more mental work\n.blur();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "701b03f0-2546-4ca7-b970-66238e40a01d",
                  "parentUUID": "d82b715d-a221-4d74-b6c1-06f35b628bb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim entered text",
                  "fullTitle": "TodoMVC - React Editing should trim entered text",
                  "timedOut": null,
                  "duration": 3345,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('    buy some sausages    ').type('{enter}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "6d60f9bb-b00b-49b3-87ca-789db06e1831",
                  "parentUUID": "d82b715d-a221-4d74-b6c1-06f35b628bb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove the item if an empty text string was entered",
                  "fullTitle": "TodoMVC - React Editing should remove the item if an empty text string was entered",
                  "timedOut": null,
                  "duration": 2503,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('{enter}');\ncy.get('@todos').should('have.length', 2);",
                  "err": {},
                  "uuid": "fdd6d701-63c4-4e05-af1a-2412b8f4bfb2",
                  "parentUUID": "d82b715d-a221-4d74-b6c1-06f35b628bb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cancel edits on escape",
                  "fullTitle": "TodoMVC - React Editing should cancel edits on escape",
                  "timedOut": null,
                  "duration": 2372,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('foo{esc}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "a9312e44-c7c1-4b3b-b2ad-401f1a0de8a8",
                  "parentUUID": "d82b715d-a221-4d74-b6c1-06f35b628bb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ba0d4c2-269d-440b-bbeb-0cf83aa7f118",
                "701b03f0-2546-4ca7-b970-66238e40a01d",
                "6d60f9bb-b00b-49b3-87ca-789db06e1831",
                "fdd6d701-63c4-4e05-af1a-2412b8f4bfb2",
                "a9312e44-c7c1-4b3b-b2ad-401f1a0de8a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13246,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a4c814e-b548-47ec-a042-b685ce0157b1",
              "title": "Counter",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the current number of todo items",
                  "fullTitle": "TodoMVC - React Counter should display the current number of todo items",
                  "timedOut": null,
                  "duration": 1238,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.todo-count').contains('1 item left');\ncy.createTodo(TODO_ITEM_TWO);\ncy.get('.todo-count').contains('2 items left');",
                  "err": {},
                  "uuid": "b3b47664-b8c6-4b61-bfed-e8b5cdcdcd7e",
                  "parentUUID": "3a4c814e-b548-47ec-a042-b685ce0157b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3b47664-b8c6-4b61-bfed-e8b5cdcdcd7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1238,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48e5f512-030f-4400-b81b-61c9e86539a0",
              "title": "Clear completed button",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the correct text",
                  "fullTitle": "TodoMVC - React Clear completed button should display the correct text",
                  "timedOut": null,
                  "duration": 2330,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(0).find('.toggle').check();\ncy.get('.clear-completed').contains('Clear completed');",
                  "err": {},
                  "uuid": "d20ad65d-9aeb-412f-882b-dc233607b2fb",
                  "parentUUID": "48e5f512-030f-4400-b81b-61c9e86539a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove completed items when clicked",
                  "fullTitle": "TodoMVC - React Clear completed button should remove completed items when clicked",
                  "timedOut": null,
                  "duration": 2292,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').click();\ncy.get('@todos').should('have.length', 2);\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "ab23a393-0a07-4f1c-8c83-5e39ca059d5a",
                  "parentUUID": "48e5f512-030f-4400-b81b-61c9e86539a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be hidden when there are no items that are completed",
                  "fullTitle": "TodoMVC - React Clear completed button should be hidden when there are no items that are completed",
                  "timedOut": null,
                  "duration": 2174,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').should('be.visible').click();\ncy.get('.clear-completed').should('not.exist');",
                  "err": {},
                  "uuid": "8b870b4a-aa36-4cd0-b7a3-91136a4bd242",
                  "parentUUID": "48e5f512-030f-4400-b81b-61c9e86539a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d20ad65d-9aeb-412f-882b-dc233607b2fb",
                "ab23a393-0a07-4f1c-8c83-5e39ca059d5a",
                "8b870b4a-aa36-4cd0-b7a3-91136a4bd242"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6796,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99650bca-8d41-4731-80a1-57f1da653a01",
              "title": "Persistence",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should persist its data",
                  "fullTitle": "TodoMVC - React Persistence should persist its data",
                  "timedOut": null,
                  "duration": 1645,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mimicking TodoMVC tests\n// by writing out this function\nfunction testState() {\n  cy.get('@firstTodo').should('contain', TODO_ITEM_ONE).and('have.class', 'completed');\n  cy.get('@secondTodo').should('contain', TODO_ITEM_TWO).and('not.have.class', 'completed');\n}\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check().then(testState).reload().then(testState);",
                  "err": {},
                  "uuid": "26a9cf85-08d3-4ac1-b237-bf6e581693f7",
                  "parentUUID": "99650bca-8d41-4731-80a1-57f1da653a01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26a9cf85-08d3-4ac1-b237-bf6e581693f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1645,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5c8d87d-d6b9-4b38-b4da-7bddb0cb3193",
              "title": "Routing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to display active items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display active items",
                  "timedOut": null,
                  "duration": 2279,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "116ca36b-e9b2-472f-a282-0913c82aaefb",
                  "parentUUID": "f5c8d87d-d6b9-4b38-b4da-7bddb0cb3193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect the back button",
                  "fullTitle": "TodoMVC - React Routing should respect the back button",
                  "timedOut": null,
                  "duration": 2524,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);\ncy.go('back');\ncy.get('@todos').should('have.length', 2);\ncy.go('back');\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "609c43e6-2818-4546-bd2a-ecb93ddb20c1",
                  "parentUUID": "f5c8d87d-d6b9-4b38-b4da-7bddb0cb3193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to display completed items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display completed items",
                  "timedOut": null,
                  "duration": 2337,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);",
                  "err": {},
                  "uuid": "3ac9b44f-2dd8-416f-8340-e7cb04f7aeba",
                  "parentUUID": "f5c8d87d-d6b9-4b38-b4da-7bddb0cb3193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to display all items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display all items",
                  "timedOut": null,
                  "duration": 2543,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('.filters').contains('All').click();\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "3480a778-453e-4e05-bd23-55d963c4d12c",
                  "parentUUID": "f5c8d87d-d6b9-4b38-b4da-7bddb0cb3193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should highlight the currently applied filter",
                  "fullTitle": "TodoMVC - React Routing should highlight the currently applied filter",
                  "timedOut": null,
                  "duration": 2246,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// using a within here which will automatically scope\n// nested 'cy' queries to our parent element <ul.filters>\ncy.get('.filters').within(function () {\n  cy.contains('All').should('have.class', 'selected');\n  cy.contains('Active').click().should('have.class', 'selected');\n  cy.contains('Completed').click().should('have.class', 'selected');\n});",
                  "err": {},
                  "uuid": "d10585af-3ed8-4964-a9d3-01ef1e6666ea",
                  "parentUUID": "f5c8d87d-d6b9-4b38-b4da-7bddb0cb3193",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "116ca36b-e9b2-472f-a282-0913c82aaefb",
                "609c43e6-2818-4546-bd2a-ecb93ddb20c1",
                "3ac9b44f-2dd8-416f-8340-e7cb04f7aeba",
                "3480a778-453e-4e05-bd23-55d963c4d12c",
                "d10585af-3ed8-4964-a9d3-01ef1e6666ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11929,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df97b20f-2e50-4a88-91c0-c8eb4375a857",
              "title": "Contrast",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "has good contrast when empty",
                  "fullTitle": "TodoMVC - React Contrast has good contrast when empty",
                  "timedOut": null,
                  "duration": 486,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.addAxeCode();\ncy.checkA11y(null, {\n  runOnly: ['cat.color']\n});",
                  "err": {},
                  "uuid": "6776c870-bcd6-4c2e-a432-52aec0cbfb88",
                  "parentUUID": "df97b20f-2e50-4a88-91c0-c8eb4375a857",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "has good contrast with several todos",
                  "fullTitle": "TodoMVC - React Contrast has good contrast with several todos",
                  "timedOut": null,
                  "duration": 1528,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.addAxeCode();\ncy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);\ncy.checkA11y(null, {\n  runOnly: ['cat.color']\n}); // and after marking an item completed\ncy.get('.todo-list li').first().find('.toggle').check();\ncy.get('.todo-list li').first().should('have.class', 'completed');\ncy.checkA11y(null, {\n  runOnly: ['cat.color']\n});",
                  "err": {},
                  "uuid": "f0b6ffd1-6df1-4adb-a1f9-f54eaf9328b1",
                  "parentUUID": "df97b20f-2e50-4a88-91c0-c8eb4375a857",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6776c870-bcd6-4c2e-a432-52aec0cbfb88",
                "f0b6ffd1-6df1-4adb-a1f9-f54eaf9328b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2014,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "7d842a28-3e9d-4b59-8ef3-b6da66a31a33"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1515,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report",
        "charts": true,
        "reportPageTitle": "todo test results",
        "saveHtml": true,
        "reportFilename": "index",
        "overwrite": true
      },
      "version": "6.2.0"
    }
  }
}