{
  "stats": {
    "suites": 12,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-13T13:57:08.608Z",
    "end": "2022-06-13T13:57:43.797Z",
    "duration": 35189,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1902666b-0731-4670-9c85-d46230675367",
      "title": "",
      "fullFile": "cypress/e2e/app.cy.js",
      "file": "cypress/e2e/app.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1f412edb-f2be-4429-bba6-5278a204ade3",
          "title": "TodoMVC - React",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "adds 2 todos",
              "fullTitle": "TodoMVC - React adds 2 todos",
              "timedOut": null,
              "duration": 769,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);",
              "err": {},
              "uuid": "5354e52a-32bf-4fe1-93ae-a9d870bbc817",
              "parentUUID": "1f412edb-f2be-4429-bba6-5278a204ade3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "21bf3c85-f523-4c17-85ad-bab66c47760a",
              "title": "When page is initially opened",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should focus on the todo input field",
                  "fullTitle": "TodoMVC - React When page is initially opened should focus on the todo input field",
                  "timedOut": null,
                  "duration": 238,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// get the currently focused element and assert\n// that it has class='new-todo'\n//\n// http://on.cypress.io/focused\ncy.focused().should('have.class', 'new-todo');",
                  "err": {},
                  "uuid": "7c3af294-6b7b-41b3-807e-f4b00f0e7fe9",
                  "parentUUID": "21bf3c85-f523-4c17-85ad-bab66c47760a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c3af294-6b7b-41b3-807e-f4b00f0e7fe9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 238,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f368c0f-154d-4cba-a9dc-c967fd9663f3",
              "title": "No Todos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide #main and #footer",
                  "fullTitle": "TodoMVC - React No Todos should hide #main and #footer",
                  "timedOut": null,
                  "duration": 173,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Unlike the TodoMVC tests, we don't need to create\n// a gazillion helper functions which are difficult to\n// parse through. Instead we'll opt to use real selectors\n// so as to make our testing intentions as clear as possible.\n//\n// http://on.cypress.io/get\ncy.get('.todo-list li').should('not.exist');\ncy.get('.main').should('not.exist');\ncy.get('.footer').should('not.exist');",
                  "err": {},
                  "uuid": "dcf778ff-f567-43d8-b14a-51330dc2da76",
                  "parentUUID": "6f368c0f-154d-4cba-a9dc-c967fd9663f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dcf778ff-f567-43d8-b14a-51330dc2da76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 173,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a6c0f5a-2731-4fdd-b41c-2352c75a30aa",
              "title": "New Todo",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to add todo items",
                  "fullTitle": "TodoMVC - React New Todo should allow me to add todo items",
                  "timedOut": null,
                  "duration": 875,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create 1st todo\ncy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}'); // make sure the 1st label contains the 1st todo text\ncy.get('.todo-list li').eq(0).find('label').should('contain', TODO_ITEM_ONE); // create 2nd todo\ncy.get('.new-todo').type(TODO_ITEM_TWO).type('{enter}'); // make sure the 2nd label contains the 2nd todo text\ncy.get('.todo-list li').eq(1).find('label').should('contain', TODO_ITEM_TWO);",
                  "err": {},
                  "uuid": "ccecc221-a111-4989-8e33-cee6abd093d5",
                  "parentUUID": "1a6c0f5a-2731-4fdd-b41c-2352c75a30aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "adds items",
                  "fullTitle": "TodoMVC - React New Todo adds items",
                  "timedOut": null,
                  "duration": 810,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create several todos then check the number of items in the list\ncy.get('.new-todo').type('todo A{enter}').type('todo B{enter}') // we can continue working with same element\n.type('todo C{enter}') // and keep adding new items\n.type('todo D{enter}');\ncy.get('.todo-list li').should('have.length', 4);",
                  "err": {},
                  "uuid": "60c9c888-c498-4266-bfc0-891b3c600741",
                  "parentUUID": "1a6c0f5a-2731-4fdd-b41c-2352c75a30aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear text input field when an item is added",
                  "fullTitle": "TodoMVC - React New Todo should clear text input field when an item is added",
                  "timedOut": null,
                  "duration": 503,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\ncy.get('.new-todo').should('have.text', '');",
                  "err": {},
                  "uuid": "edbf270e-ce48-4caa-aa51-851fc8172211",
                  "parentUUID": "1a6c0f5a-2731-4fdd-b41c-2352c75a30aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should append new items to the bottom of the list",
                  "fullTitle": "TodoMVC - React New Todo should append new items to the bottom of the list",
                  "timedOut": null,
                  "duration": 1158,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of a custom command\n// defined in cypress/support/commands.js\ncy.createDefaultTodos().as('todos'); // even though the text content is split across\n// multiple <span> and <strong> elements\n// `cy.contains` can verify this correctly\ncy.get('.todo-count').contains('3 items left');\ncy.get('@todos').eq(0).find('label').should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).find('label').should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).find('label').should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "e636f358-3e3f-4b13-8bf9-5813333d980f",
                  "parentUUID": "1a6c0f5a-2731-4fdd-b41c-2352c75a30aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim text input",
                  "fullTitle": "TodoMVC - React New Todo should trim text input",
                  "timedOut": null,
                  "duration": 568,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of another custom command\n// since we repeat the todo creation over and over\n// again. It's up to you to decide when to abstract\n// repetitive behavior and roll that up into a custom\n// command vs explicitly writing the code.\ncy.createTodo(`    ${TODO_ITEM_ONE}    `); // we use as explicit assertion here about the text instead of\n// using 'contain' so we can specify the exact text of the element\n// does not have any whitespace around it\ncy.get('.todo-list li').eq(0).should('have.text', TODO_ITEM_ONE);",
                  "err": {},
                  "uuid": "116325ea-723f-49e7-8cd3-ff063190deae",
                  "parentUUID": "1a6c0f5a-2731-4fdd-b41c-2352c75a30aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show #main and #footer when items added",
                  "fullTitle": "TodoMVC - React New Todo should show #main and #footer when items added",
                  "timedOut": null,
                  "duration": 478,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.main').should('be.visible');\ncy.get('.footer').should('be.visible');",
                  "err": {},
                  "uuid": "4056f425-d328-42b9-a983-7bb860d54e9e",
                  "parentUUID": "1a6c0f5a-2731-4fdd-b41c-2352c75a30aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccecc221-a111-4989-8e33-cee6abd093d5",
                "60c9c888-c498-4266-bfc0-891b3c600741",
                "edbf270e-ce48-4caa-aa51-851fc8172211",
                "e636f358-3e3f-4b13-8bf9-5813333d980f",
                "116325ea-723f-49e7-8cd3-ff063190deae",
                "4056f425-d328-42b9-a983-7bb860d54e9e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4392,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74ec57fa-5b4b-4efb-9032-f88833e11ac3",
              "title": "Mark all as completed",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark all items as completed",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to mark all items as completed",
                  "timedOut": null,
                  "duration": 1288,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// complete all todos\n// we use 'check' instead of 'click'\n// because that indicates our intention much clearer\ncy.get('.toggle-all').check(); // get each todo li and ensure its class is 'completed'\ncy.get('@todos').eq(0).should('have.class', 'completed');\ncy.get('@todos').eq(1).should('have.class', 'completed');\ncy.get('@todos').eq(2).should('have.class', 'completed');",
                  "err": {},
                  "uuid": "c8ad067d-c3e1-4468-a95f-41155fa122bd",
                  "parentUUID": "74ec57fa-5b4b-4efb-9032-f88833e11ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to clear the complete state of all items",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to clear the complete state of all items",
                  "timedOut": null,
                  "duration": 1338,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check and then immediately uncheck\ncy.get('.toggle-all').check().uncheck();\ncy.get('@todos').eq(0).should('not.have.class', 'completed');\ncy.get('@todos').eq(1).should('not.have.class', 'completed');\ncy.get('@todos').eq(2).should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "bd58f580-b5b3-42b4-a986-49f03dde0657",
                  "parentUUID": "74ec57fa-5b4b-4efb-9032-f88833e11ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "complete all checkbox should update state when items are completed / cleared",
                  "fullTitle": "TodoMVC - React Mark all as completed complete all checkbox should update state when items are completed / cleared",
                  "timedOut": null,
                  "duration": 1450,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// alias the .toggle-all for reuse later\ncy.get('.toggle-all').as('toggleAll').check() // this assertion is silly here IMO but\n// it is what TodoMVC does\n.should('be.checked'); // alias the first todo and then click it\ncy.get('.todo-list li').eq(0).as('firstTodo').find('.toggle').uncheck(); // reference the .toggle-all element again\n// and make sure its not checked\ncy.get('@toggleAll').should('not.be.checked'); // reference the first todo again and now toggle it\ncy.get('@firstTodo').find('.toggle').check(); // assert the toggle all is checked again\ncy.get('@toggleAll').should('be.checked');",
                  "err": {},
                  "uuid": "463eb9c1-d799-4ecf-acbc-e92cd729c6a4",
                  "parentUUID": "74ec57fa-5b4b-4efb-9032-f88833e11ac3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8ad067d-c3e1-4468-a95f-41155fa122bd",
                "bd58f580-b5b3-42b4-a986-49f03dde0657",
                "463eb9c1-d799-4ecf-acbc-e92cd729c6a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4076,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa673743-8cb5-49b1-b5ad-c3aa3acb5475",
              "title": "Item",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to mark items as complete",
                  "timedOut": null,
                  "duration": 909,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// we are aliasing the return value of\n// our custom command 'createTodo'\n//\n// the return value is the <li> in the <ul.todos-list>\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('have.class', 'completed');",
                  "err": {},
                  "uuid": "b862c807-3657-42f6-8c4b-1cedc9bc01e9",
                  "parentUUID": "fa673743-8cb5-49b1-b5ad-c3aa3acb5475",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to un-mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to un-mark items as complete",
                  "timedOut": null,
                  "duration": 905,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@firstTodo').find('.toggle').uncheck();\ncy.get('@firstTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "fa49928a-847d-4b2f-a3af-c725c061c284",
                  "parentUUID": "fa673743-8cb5-49b1-b5ad-c3aa3acb5475",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to edit an item",
                  "fullTitle": "TodoMVC - React Item should allow me to edit an item",
                  "timedOut": null,
                  "duration": 1684,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createDefaultTodos().as('todos');\ncy.get('@todos').eq(1).as('secondTodo') // TODO: fix this, dblclick should\n// have been issued to label\n.find('label').dblclick(); // clear out the inputs current value\n// and type a new value\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages').type('{enter}'); // explicitly assert about the text value\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "ea8ad83e-539a-4ea1-a9d2-fe656d78076b",
                  "parentUUID": "fa673743-8cb5-49b1-b5ad-c3aa3acb5475",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b862c807-3657-42f6-8c4b-1cedc9bc01e9",
                "fa49928a-847d-4b2f-a3af-c725c061c284",
                "ea8ad83e-539a-4ea1-a9d2-fe656d78076b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3498,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83d258f7-6c82-41f0-b8fe-7ae96ee2a48e",
              "title": "Editing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide other controls when editing",
                  "fullTitle": "TodoMVC - React Editing should hide other controls when editing",
                  "timedOut": null,
                  "duration": 1221,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.toggle').should('not.be.visible');\ncy.get('@secondTodo').find('label').should('not.be.visible');",
                  "err": {},
                  "uuid": "038cdd3b-506d-4857-be39-773a0c4467ae",
                  "parentUUID": "83d258f7-6c82-41f0-b8fe-7ae96ee2a48e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should save edits on blur",
                  "fullTitle": "TodoMVC - React Editing should save edits on blur",
                  "timedOut": null,
                  "duration": 1733,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages') // we can just send the blur event directly\n// to the input instead of having to click\n// on another button on the page. though you\n// could do that its just more mental work\n.blur();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "a03874f0-ea64-4beb-acb7-143cfe4e4f8a",
                  "parentUUID": "83d258f7-6c82-41f0-b8fe-7ae96ee2a48e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trim entered text",
                  "fullTitle": "TodoMVC - React Editing should trim entered text",
                  "timedOut": null,
                  "duration": 1769,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('    buy some sausages    ').type('{enter}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "0de17574-7c54-4b28-b9d7-8074b58ced40",
                  "parentUUID": "83d258f7-6c82-41f0-b8fe-7ae96ee2a48e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove the item if an empty text string was entered",
                  "fullTitle": "TodoMVC - React Editing should remove the item if an empty text string was entered",
                  "timedOut": null,
                  "duration": 1421,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('{enter}');\ncy.get('@todos').should('have.length', 2);",
                  "err": {},
                  "uuid": "856cabff-26ee-484c-a78c-68bf18b2e859",
                  "parentUUID": "83d258f7-6c82-41f0-b8fe-7ae96ee2a48e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cancel edits on escape",
                  "fullTitle": "TodoMVC - React Editing should cancel edits on escape",
                  "timedOut": null,
                  "duration": 1422,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('foo{esc}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "de2f1b68-aeaf-4506-92cd-1b6aa177d8d4",
                  "parentUUID": "83d258f7-6c82-41f0-b8fe-7ae96ee2a48e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "038cdd3b-506d-4857-be39-773a0c4467ae",
                "a03874f0-ea64-4beb-acb7-143cfe4e4f8a",
                "0de17574-7c54-4b28-b9d7-8074b58ced40",
                "856cabff-26ee-484c-a78c-68bf18b2e859",
                "de2f1b68-aeaf-4506-92cd-1b6aa177d8d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7566,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f75cdbf4-70c2-4e9d-b7de-80d8c6050373",
              "title": "Counter",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the current number of todo items",
                  "fullTitle": "TodoMVC - React Counter should display the current number of todo items",
                  "timedOut": null,
                  "duration": 711,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.todo-count').contains('1 item left');\ncy.createTodo(TODO_ITEM_TWO);\ncy.get('.todo-count').contains('2 items left');",
                  "err": {},
                  "uuid": "41552434-f912-4242-a59c-19bf6bfc2564",
                  "parentUUID": "f75cdbf4-70c2-4e9d-b7de-80d8c6050373",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41552434-f912-4242-a59c-19bf6bfc2564"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 711,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d990d22-23d8-4fb0-8848-449de387b745",
              "title": "Clear completed button",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the correct text",
                  "fullTitle": "TodoMVC - React Clear completed button should display the correct text",
                  "timedOut": null,
                  "duration": 1255,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(0).find('.toggle').check();\ncy.get('.clear-completed').contains('Clear completed');",
                  "err": {},
                  "uuid": "4be038c8-8615-4a3e-a674-c66c05c67c88",
                  "parentUUID": "6d990d22-23d8-4fb0-8848-449de387b745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove completed items when clicked",
                  "fullTitle": "TodoMVC - React Clear completed button should remove completed items when clicked",
                  "timedOut": null,
                  "duration": 1321,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').click();\ncy.get('@todos').should('have.length', 2);\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "8037ed21-8f00-4aaf-9343-66b59e484db8",
                  "parentUUID": "6d990d22-23d8-4fb0-8848-449de387b745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be hidden when there are no items that are completed",
                  "fullTitle": "TodoMVC - React Clear completed button should be hidden when there are no items that are completed",
                  "timedOut": null,
                  "duration": 1341,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').should('be.visible').click();\ncy.get('.clear-completed').should('not.exist');",
                  "err": {},
                  "uuid": "fa46d48d-997d-4bca-a15f-6081aab0868f",
                  "parentUUID": "6d990d22-23d8-4fb0-8848-449de387b745",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4be038c8-8615-4a3e-a674-c66c05c67c88",
                "8037ed21-8f00-4aaf-9343-66b59e484db8",
                "fa46d48d-997d-4bca-a15f-6081aab0868f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3917,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "510cc965-d1c2-4784-a992-75bd4f44f34e",
              "title": "Persistence",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should persist its data",
                  "fullTitle": "TodoMVC - React Persistence should persist its data",
                  "timedOut": null,
                  "duration": 1010,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mimicking TodoMVC tests\n// by writing out this function\nfunction testState() {\n  cy.get('@firstTodo').should('contain', TODO_ITEM_ONE).and('have.class', 'completed');\n  cy.get('@secondTodo').should('contain', TODO_ITEM_TWO).and('not.have.class', 'completed');\n}\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check().then(testState).reload().then(testState);",
                  "err": {},
                  "uuid": "501af6be-d7e4-4a0c-bd49-fb060984faa1",
                  "parentUUID": "510cc965-d1c2-4784-a992-75bd4f44f34e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "501af6be-d7e4-4a0c-bd49-fb060984faa1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1010,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d78efe97-9676-4b9e-b119-f4d28a988316",
              "title": "Routing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to display active items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display active items",
                  "timedOut": null,
                  "duration": 1332,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "86b74e15-1342-4e7e-9483-dceedf4749c7",
                  "parentUUID": "d78efe97-9676-4b9e-b119-f4d28a988316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect the back button",
                  "fullTitle": "TodoMVC - React Routing should respect the back button",
                  "timedOut": null,
                  "duration": 1560,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);\ncy.go('back');\ncy.get('@todos').should('have.length', 2);\ncy.go('back');\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "baf22916-b595-47af-9d4c-16ae9958d6cc",
                  "parentUUID": "d78efe97-9676-4b9e-b119-f4d28a988316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to display completed items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display completed items",
                  "timedOut": null,
                  "duration": 1297,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);",
                  "err": {},
                  "uuid": "07d5d0ad-6a67-4947-9196-8e138ff07d17",
                  "parentUUID": "d78efe97-9676-4b9e-b119-f4d28a988316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to display all items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display all items",
                  "timedOut": null,
                  "duration": 1497,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('.filters').contains('All').click();\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "dcdfeba4-0b74-4e38-9a17-108c92ca809b",
                  "parentUUID": "d78efe97-9676-4b9e-b119-f4d28a988316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should highlight the currently applied filter",
                  "fullTitle": "TodoMVC - React Routing should highlight the currently applied filter",
                  "timedOut": null,
                  "duration": 1290,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// using a within here which will automatically scope\n// nested 'cy' queries to our parent element <ul.filters>\ncy.get('.filters').within(function () {\n  cy.contains('All').should('have.class', 'selected');\n  cy.contains('Active').click().should('have.class', 'selected');\n  cy.contains('Completed').click().should('have.class', 'selected');\n});",
                  "err": {},
                  "uuid": "62eff732-3d37-4f38-843f-3ae2f946d5a8",
                  "parentUUID": "d78efe97-9676-4b9e-b119-f4d28a988316",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86b74e15-1342-4e7e-9483-dceedf4749c7",
                "baf22916-b595-47af-9d4c-16ae9958d6cc",
                "07d5d0ad-6a67-4947-9196-8e138ff07d17",
                "dcdfeba4-0b74-4e38-9a17-108c92ca809b",
                "62eff732-3d37-4f38-843f-3ae2f946d5a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6976,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c092320a-2066-45f4-ac8a-807038db2a95",
              "title": "Contrast",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "has good contrast when empty",
                  "fullTitle": "TodoMVC - React Contrast has good contrast when empty",
                  "timedOut": null,
                  "duration": 237,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.addAxeCode();\ncy.checkA11y(null, {\n  runOnly: ['cat.color']\n});",
                  "err": {},
                  "uuid": "3d4a1f9d-36ad-410a-8938-ee8d60ff4fcc",
                  "parentUUID": "c092320a-2066-45f4-ac8a-807038db2a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "has good contrast with several todos",
                  "fullTitle": "TodoMVC - React Contrast has good contrast with several todos",
                  "timedOut": null,
                  "duration": 798,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.addAxeCode();\ncy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);\ncy.checkA11y(null, {\n  runOnly: ['cat.color']\n}); // and after marking an item completed\ncy.get('.todo-list li').first().find('.toggle').check();\ncy.get('.todo-list li').first().should('have.class', 'completed');\ncy.checkA11y(null, {\n  runOnly: ['cat.color']\n});",
                  "err": {},
                  "uuid": "a48d029b-000e-42b9-983b-806b84277f49",
                  "parentUUID": "c092320a-2066-45f4-ac8a-807038db2a95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d4a1f9d-36ad-410a-8938-ee8d60ff4fcc",
                "a48d029b-000e-42b9-983b-806b84277f49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1035,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "5354e52a-32bf-4fe1-93ae-a9d870bbc817"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 769,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report",
        "charts": true,
        "reportPageTitle": "todo test results",
        "saveHtml": true,
        "reportFilename": "index",
        "overwrite": true
      },
      "version": "6.2.0"
    }
  }
}